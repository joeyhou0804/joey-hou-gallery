<% layout('layouts/boilerplate')%>
<div id="map" style="width: 100%; height: 500px"></div>
<h1>All Stations</h1>
<% for (let station of stations){%>
    <div class="card mb-3" >
        <div class="row">
            <div class="col-md-4">
                <% if(station.images.length) {%>
                    <img class="img-fluid" alt="" src="<%= station.images[0].url %>">
                <% } else { %>
                    <img class="img-fluid" alt="" src="https://res.cloudinary.com/joey-hou-homepage/image/upload/v1636068109/joeyhouhomepage/train_default_hbnyvq.png">
                <% } %>
            </div>
            <div class="col-md-8">
                <div class="card-body">
                    <h5 class="card-title"><%= station.location %></h5>
                    <p class="card-text"><%= station.date %></p>
                    <p class="card-text">
                        <small class="text-muted"><%= station.train%></small>
                    </p>
                    <a class="btn btn-primary" href="/stations/<%= station._id%>">View <%=station.location %></a>
                </div>
            </div>
        </div>
    </div>
<% }%>

<script>
    const mapToken = '<%-process.env.MAPBOX_TOKEN%>';
    const stations = {features: <%-JSON.stringify(stations) %>};

    mapboxgl.accessToken = mapToken;
    const map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/mapbox/light-v10',
        center: [-103.5917, 40.6699],
        zoom: 3
    });

    map.addControl(new mapboxgl.NavigationControl());
 
    map.on('load', () => {
        // Add a new source from our GeoJSON data and
        // set the 'cluster' option to true. GL-JS will
        // add the point_count property to your source data.
        map.addSource('stations', {
            type: 'geojson',
            // Point to GeoJSON data. This example visualizes all M1.0+ earthquakes
            // from 12/22/15 to 1/21/16 as logged by USGS' Earthquake hazards program.
            data: stations,
            cluster: true,
            clusterMaxZoom: 14, // Max zoom to cluster points on
            clusterRadius: 8 // Radius of each cluster when clustering points (defaults to 50)
        });
 
        map.addLayer({
            id: 'clusters',
            type: 'circle',
            source: 'stations',
            filter: ['has', 'point_count'],
            paint: {
                // Use step expressions (https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-step)
                // with three steps to implement three types of circles:
                //   * Blue, 20px circles when point count is less than 100
                //   * Yellow, 30px circles when point count is between 100 and 750
                //   * Pink, 40px circles when point count is greater than or equal to 750
                'circle-color': [
                    'step',
                    ['get', 'point_count'],
                    '#51bbd6',
                    3,
                    '#f1f075',
                    6,
                    '#f28cb1'
                ],
                'circle-radius': [
                    'step',
                    ['get', 'point_count'],
                    20,
                    3,
                    25,
                    6,
                    30
                ]
            }
        });
 
        map.addLayer({
            id: 'cluster-count',
            type: 'symbol',
            source: 'stations',
            filter: ['has', 'point_count'],
            layout: {
                'text-field': '{point_count_abbreviated}',
                'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],
                'text-size': 12
            }
        });
 
        map.addLayer({
            id: 'unclustered-point',
            type: 'circle',
            source: 'stations',
            filter: ['!', ['has', 'point_count']],
            paint: {
                'circle-color': '#11b4da',
                'circle-radius': 6,
                'circle-stroke-width': 2,
                'circle-stroke-color': '#fff'
            }
        });
 
        // inspect a cluster on click
        map.on('click', 'clusters', (e) => {
            const features = map.queryRenderedFeatures(e.point, {
            layers: ['clusters']
            });
            const clusterId = features[0].properties.cluster_id;
            map.getSource('stations').getClusterExpansionZoom(
                clusterId,
                (err, zoom) => {
                    if (err) return;
        
                    map.easeTo({
                        center: features[0].geometry.coordinates,
                        zoom: zoom
                    });
                }
            );
        });
 
        // When a click event occurs on a feature in
        // the unclustered-point layer, open a popup at
        // the location of the feature, with
        // description HTML from its properties.
        map.on('click', 'unclustered-point', (e) => {
            const {popUpMarkup} = e.features[0].properties;
            const coordinates = e.features[0].geometry.coordinates.slice();
    
            // Ensure that if the map is zoomed out such that
            // multiple copies of the feature are visible, the
            // popup appears over the copy being pointed to.
            while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
                coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
            }
    
            new mapboxgl.Popup()
                .setLngLat(coordinates)
                .setHTML(popUpMarkup)
                .addTo(map);
        });
 
        map.on('mouseenter', 'clusters', () => {
            map.getCanvas().style.cursor = 'pointer';
        });
        map.on('mouseleave', 'clusters', () => {
            map.getCanvas().style.cursor = '';
        });
    });
</script>